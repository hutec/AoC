{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"inputs/aoc11\", \"r\") as f:\n",
    "    seq = f.read().splitlines()\n",
    "seq = list(map(list, seq))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbor_offsets = list(itertools.product([-1, 0, 1], repeat=2))\n",
    "\n",
    "def is_outside(height, width, row, col):\n",
    "    return row < 0 or row >= height or col < 0 or col >= width\n",
    "\n",
    "def count_occupied_neighbors_adjacent(world, row, col):\n",
    "    occupied = 0\n",
    "    height = len(world)\n",
    "    width = len(world[0])\n",
    "    \n",
    "    for row_offset, col_offset in neighbor_offsets:\n",
    "        if (row_offset, col_offset) == (0, 0):\n",
    "            continue\n",
    "        if is_outside(height, width, row + row_offset, col + col_offset):\n",
    "            continue\n",
    "        occupied += world[row + row_offset][col + col_offset] == \"#\"\n",
    "            \n",
    "    return occupied\n",
    "\n",
    "def count_occupied_neighbors_visible(world, row, col):\n",
    "    occupied = 0\n",
    "    height = len(world)\n",
    "    width = len(world[0])\n",
    "    \n",
    "    for row_offset, col_offset in neighbor_offsets:\n",
    "        if (row_offset, col_offset) == (0, 0):\n",
    "            continue\n",
    "        _row, _col = row + row_offset, col + col_offset\n",
    "        while not is_outside(height, width, _row, _col):\n",
    "            if world[_row][_col] == \"#\":\n",
    "                occupied += 1\n",
    "                break\n",
    "            elif world[_row][_col] == \"L\":\n",
    "                break\n",
    "            _row, _col = _row + row_offset, _col + col_offset\n",
    "    return occupied\n",
    "    \n",
    "\n",
    "def simulate_round(world, count_occupied_fn, thres):\n",
    "    new_world = copy.deepcopy(world)\n",
    "    changed = False\n",
    "    for row in range(len(world)):\n",
    "        for col in range(len(world[0])): \n",
    "            if world[row][col] == \".\":\n",
    "                continue\n",
    "            occupied_neighbors = count_occupied_fn(world, row, col)\n",
    "            if world[row][col] == \"L\" and occupied_neighbors == 0:\n",
    "                new_world[row][col] = \"#\"\n",
    "                changed = True\n",
    "            elif world[row][col] == \"#\" and occupied_neighbors >= thres:\n",
    "                new_world[row][col] = \"L\"\n",
    "                changed = True\n",
    "    return new_world, changed\n",
    "\n",
    "def simulate(world, count_occupied_fn, thres):\n",
    "    \"\"\"Simulates until converged and returns number of occupied seats.\"\"\"\n",
    "    changed = True\n",
    "    while changed:\n",
    "        world, changed = simulate_round(world, count_occupied_fn, thres)\n",
    "        \n",
    "    return list(itertools.chain.from_iterable(world)).count(\"#\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2261"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simulate(seq, count_occupied_neighbors_adjacent, thres=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2039"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simulate(seq, count_occupied_neighbors_visible, thres=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
